-- ========================================
-- ADVANCED MINING TURTLE SCRIPT v1.0
-- Optimal Branch Mining with Smart Torch System
-- ========================================
--
-- SETUP TALƒ∞MATLARI:
-- 1. Turtle'ƒ± mining yapmak istediƒüiniz yerin √ºst√ºne yerle≈ütirin
-- 2. Home chest'i turtle'ƒ±n ALTINA yerle≈ütirin (items buraya aktarƒ±lacak)
-- 3. Inventory setup:
--    Slot 1: Torch'lar (64 adet √∂nerilir)
--    Slot 15: Fuel items (coal, wood, charcoal - otomatik kullanƒ±lƒ±r)
--    Slot 16: Spare chest (ge√ßici drops i√ßin)  
--    Slot 2-14: Bo≈ü (mining loot i√ßin)
-- 4. Script'i √ßalƒ±≈ütƒ±rƒ±n: lua mining.lua
-- 5. Script otomatik olarak:
--    - Y=11 seviyesine inecek
--    - Branch mining pattern ba≈ülatacak
--    - Inventory dolunca home'a d√∂n√ºp bo≈üaltacak
--    - Mining tamamlandƒ±ƒüƒ±nda t√ºm items'larƒ± home chest'e aktaracak
--
-- √ñZELLƒ∞KLER:
-- ‚úÖ 2x1 Diamond Level Branch Mining (Y=11-12)
-- ‚úÖ Smart Torch Placement (geri d√∂nerken engel olmaz)
-- ‚úÖ Auto Inventory Management (home'a d√∂n√ºp bo≈üaltƒ±r)
-- ‚úÖ Position Tracking & Return Home System
-- ‚úÖ Fuel & Lava Safety Controls
-- ‚úÖ Progress Reporting & Error Handling
-- ========================================

-- GLOBAL SETTINGS
local CONFIG = {
    TORCH_INTERVAL = 8,        -- Her 8 blokta bir torch
    TUNNEL_LENGTH = 50,        -- Ana t√ºnel uzunluƒüu
    BRANCH_LENGTH = 30,        -- Yan dal uzunluƒüu  
    BRANCH_SPACING = 4,        -- Dallar arasƒ± mesafe
    MINING_LEVEL = 11,         -- Y koordinatƒ± (diamond level - alt seviye)
    TUNNEL_HEIGHT = 2,         -- T√ºnel y√ºksekliƒüi (1=tek blok, 2=√ßift blok)
    FUEL_MIN = 1000,          -- Minimum fuel kontrol√º
    FUEL_EMERGENCY = 200,     -- Acil durum fuel limiti (home'a d√∂nmek i√ßin)
    TORCH_SLOT = 1,           -- Torch slot numarasƒ±
    CHEST_SLOT = 16,          -- Geri d√∂n√º≈ü chest slot
    FUEL_SLOT = 15            -- Fuel items slot (coal, wood, etc.)
}

-- DIRECTION CONSTANTS
local NORTH, EAST, SOUTH, WEST = 0, 1, 2, 3
local direction = NORTH

-- POSITION TRACKING
local pos = {x = 0, y = 0, z = 0}
local home_pos = {x = 0, y = 0, z = 0}
local torch_positions = {}
local mining_path = {} -- Mining rotasƒ± kayƒ±t

-- ========================================
-- UTILITY FUNCTIONS
-- ========================================

function log(message)
    print("[" .. os.date("%H:%M:%S") .. "] " .. message)
end

function checkFuel()
    local current_fuel = turtle.getFuelLevel()
    
    if current_fuel < CONFIG.FUEL_EMERGENCY then
        log("üö® ACIL DURUM: Fuel kritik seviyede! (" .. current_fuel .. ")")
        log("üè† Acilen home'a d√∂n√ºl√ºyor...")
        return false
    elseif current_fuel < CONFIG.FUEL_MIN then
        log("‚ö†Ô∏è  UYARI: Fuel azalƒ±yor! (" .. current_fuel .. ")")
        -- Otomatik fuel eklemeye √ßalƒ±≈ü
        if autoRefuel() then
            log("‚úÖ Otomatik fuel eklendi")
            return true
        else
            log("‚ùå Fuel bulunamadƒ±, mining durduruluyor")
            return false
        end
    end
    return true
end

function autoRefuel()
    local initial_fuel = turtle.getFuelLevel()
    
    -- Fuel slot'undaki item'larƒ± kullan
    if selectItem(CONFIG.FUEL_SLOT) then
        local item_count = turtle.getItemCount(CONFIG.FUEL_SLOT)
        if item_count > 0 then
            turtle.refuel(item_count)
            log("‚õΩ " .. item_count .. " adet fuel item kullanƒ±ldƒ±")
        end
    end
    
    -- Mining sƒ±rasƒ±nda bulunan coal'larƒ± kullan
    for slot = 2, 14 do
        if turtle.getItemCount(slot) > 0 then
            turtle.select(slot)
            local success, data = turtle.getItemDetail()
            if success and data.name then
                -- Coal, wood, charcoal vs. kontrol et
                if string.find(data.name, "coal") or 
                   string.find(data.name, "wood") or
                   string.find(data.name, "log") or
                   string.find(data.name, "plank") then
                    
                    local refuel_amount = math.min(data.count, 10) -- En fazla 10 adet
                    turtle.refuel(refuel_amount)
                    log("‚õΩ " .. refuel_amount .. " adet " .. data.name .. " fuel olarak kullanƒ±ldƒ±")
                    break
                end
            end
        end
    end
    
    local gained_fuel = turtle.getFuelLevel() - initial_fuel
    return gained_fuel > 0
end

function calculateFuelNeeded()
    -- Mining i√ßin gereken fuel'i hesapla
    local tunnel_moves = CONFIG.TUNNEL_LENGTH * 2 -- ƒ∞leri gidip geri gel
    local branch_moves = CONFIG.BRANCH_LENGTH * 2 * (CONFIG.TUNNEL_LENGTH / CONFIG.BRANCH_SPACING) * 2 -- T√ºm dallar
    local home_distance = getDistanceToHome() * 2 -- Home'a gidip gelme
    
    local total_moves = tunnel_moves + branch_moves + home_distance + 500 -- Safety margin
    
    log("üìä Tahmini fuel ihtiyacƒ±: " .. total_moves)
    return total_moves
end

function selectItem(slot)
    if turtle.getItemCount(slot) > 0 then
        turtle.select(slot)
        return true
    end
    return false
end

-- ========================================
-- MOVEMENT FUNCTIONS WITH POSITION TRACKING
-- ========================================

function updatePosition(dx, dy, dz)
    pos.x = pos.x + dx
    pos.y = pos.y + dy  
    pos.z = pos.z + dz
    
    -- Mining path'e ekle (geri d√∂n√º≈ü i√ßin)
    table.insert(mining_path, {x = pos.x, y = pos.y, z = pos.z, dir = direction})
end

function setHomePosition()
    home_pos.x = pos.x
    home_pos.y = pos.y
    home_pos.z = pos.z
    log("üè† Home pozisyonu kaydedildi: (" .. home_pos.x .. ", " .. home_pos.y .. ", " .. home_pos.z .. ")")
end

function getDistanceToHome()
    local dx = math.abs(pos.x - home_pos.x)
    local dy = math.abs(pos.y - home_pos.y) 
    local dz = math.abs(pos.z - home_pos.z)
    return dx + dy + dz -- Manhattan distance
end

function safeForward()
    -- √ñnce t√ºnel y√ºksekliƒüine g√∂re t√ºm bloklarƒ± kaz
    digTunnelSection()
    
    -- Sonra ilerle
    while not turtle.forward() do
        if turtle.detect() then
            turtle.dig()
        else
            turtle.attack() -- Mob saldƒ±rƒ±sƒ±
        end
        sleep(0.1)
    end
    
    -- Position update based on direction
    if direction == NORTH then updatePosition(0, 0, -1)
    elseif direction == EAST then updatePosition(1, 0, 0)
    elseif direction == SOUTH then updatePosition(0, 0, 1)
    elseif direction == WEST then updatePosition(-1, 0, 0)
    end
end

function digTunnelSection()
    -- √ñnce √∂n√ºndeki bloku kaz
    while turtle.detect() do
        turtle.dig()
        sleep(0.1)
    end
    
    -- T√ºnel y√ºksekliƒüi 2 ise √ºst bloku da kaz
    if CONFIG.TUNNEL_HEIGHT == 2 then
        while turtle.detectUp() do
            turtle.digUp()
            sleep(0.1)
        end
    end
    
    -- Her zaman alt bloku kontrol et (lava/water i√ßin)
    if turtle.detectDown() then
        local success, data = turtle.inspectDown()
        if success and data.name then
            -- Lava veya water deƒüilse kaz
            if not string.find(data.name, "lava") and not string.find(data.name, "water") then
                turtle.digDown()
            else
                log("‚ö†Ô∏è  " .. data.name .. " tespit edildi, alt blok kazƒ±lmadƒ±")
            end
        end
    end
end

function safeUp()
    while not turtle.up() do
        if turtle.detectUp() then
            turtle.digUp()
        else
            turtle.attackUp()
        end
        sleep(0.1)
    end
    updatePosition(0, 1, 0)
end

function safeDown()
    while not turtle.down() do
        if turtle.detectDown() then
            turtle.digDown()
        else
            turtle.attackDown()
        end
        sleep(0.1)
    end
    updatePosition(0, -1, 0)
end

function turnLeft()
    turtle.turnLeft()
    direction = (direction - 1) % 4
end

function turnRight() 
    turtle.turnRight()
    direction = (direction + 1) % 4
end

function turnAround()
    turnRight()
    turnRight()
end

-- ========================================
-- SMART TORCH PLACEMENT SYSTEM
-- ========================================

function isWallPresent(side)
    if side == "left" then
        turnLeft()
        local hasWall = turtle.detect()
        turnRight()
        return hasWall
    elseif side == "right" then
        turnRight() 
        local hasWall = turtle.detect()
        turnLeft()
        return hasWall
    end
    return false
end

function canPlaceTorch(side)
    -- Torch'ƒ±n geri d√∂nerken engel olup olmayacaƒüƒ±nƒ± kontrol et
    local torch_pos = {x = pos.x, y = pos.y, z = pos.z}
    
    if side == "left" then
        if direction == NORTH then torch_pos.x = torch_pos.x - 1
        elseif direction == EAST then torch_pos.z = torch_pos.z - 1
        elseif direction == SOUTH then torch_pos.x = torch_pos.x + 1
        elseif direction == WEST then torch_pos.z = torch_pos.z + 1
        end
    end
    
    -- √ñnceden torch yerle≈ütirilmi≈ü mi kontrol et
    for _, old_pos in pairs(torch_positions) do
        if old_pos.x == torch_pos.x and old_pos.y == torch_pos.y and old_pos.z == torch_pos.z then
            return false -- Zaten torch var
        end
    end
    
    return true
end

function placeTorchSmart(side, steps_taken)
    -- Torch yerle≈ütirme ko≈üullarƒ±:
    -- 1. Belirli aralƒ±klarla
    -- 2. Duvar mevcut olmalƒ±  
    -- 3. √ñnceden torch yoksa
    -- 4. Torch slot'unda item var
    
    if steps_taken % CONFIG.TORCH_INTERVAL ~= 0 then return false end
    if not selectItem(CONFIG.TORCH_SLOT) then return false end
    if not isWallPresent(side) then 
        log("‚ö†Ô∏è  " .. side .. " tarafƒ±nda duvar yok, torch yerle≈ütirilmedi")
        return false 
    end
    if not canPlaceTorch(side) then return false end
    
    if side == "left" then
        turnLeft()
        if turtle.place() then
            -- Torch pozisyonunu kaydet
            local torch_pos = {x = pos.x, y = pos.y, z = pos.z}
            if direction == EAST then torch_pos.x = torch_pos.x - 1
            elseif direction == SOUTH then torch_pos.z = torch_pos.z - 1  
            elseif direction == WEST then torch_pos.x = torch_pos.x + 1
            elseif direction == NORTH then torch_pos.z = torch_pos.z + 1
            end
            table.insert(torch_positions, torch_pos)
            log("üî• Torch yerle≈ütirildi: " .. side)
        end
        turnRight()
        return true
    elseif side == "right" then
        turnRight()
        if turtle.place() then
            log("üî• Torch yerle≈ütirildi: " .. side)
        end
        turnLeft() 
        return true
    end
    
    return false
end

-- ========================================
-- INVENTORY MANAGEMENT  
-- ========================================

function isInventoryFull()
    for slot = 2, 15 do -- Slot 1 torch, slot 16 chest i√ßin ayrƒ±lmƒ±≈ü
        if turtle.getItemCount(slot) == 0 then
            return false
        end
    end
    return true
end

function dropItems()
    log("üì¶ Inventory dolu, home'a d√∂n√ºl√ºyor...")
    local mining_position = {x = pos.x, y = pos.y, z = pos.z, dir = direction}
    
    -- Home'a git
    if not returnToHome() then
        log("‚ùå Home'a d√∂n√º≈ü ba≈üarƒ±sƒ±z!")
        return false
    end
    
    -- Home chest'e items aktar
    if not depositItemsAtHome() then
        log("‚ùå Items aktarƒ±mƒ± ba≈üarƒ±sƒ±z!")
        return false  
    end
    
    -- Mining pozisyonuna geri d√∂n
    if not returnToMiningPosition(mining_position) then
        log("‚ùå Mining pozisyonuna d√∂n√º≈ü ba≈üarƒ±sƒ±z!")
        return false
    end
    
    log("‚úÖ Inventory bo≈üaltƒ±ldƒ± ve mining'e devam ediliyor")
    return true
end

function returnToHome()
    log("üè† Home'a d√∂n√ºl√ºyor... Mesafe: " .. getDistanceToHome())
    
    local max_steps = 1000
    local steps = 0
    
    -- Basit pathfinding - X, Z, Y sƒ±rasƒ±nda
    while pos.x ~= home_pos.x or pos.z ~= home_pos.z or pos.y ~= home_pos.y do
        steps = steps + 1
        if steps > max_steps then
            log("‚ùå Home'a d√∂n√º≈ü sƒ±rasƒ±nda sonsuz d√∂ng√º tespit edildi!")
            return false
        end
        -- X ekseni
        if pos.x < home_pos.x then
            faceDirection(EAST)
            safeForward()
        elseif pos.x > home_pos.x then
            faceDirection(WEST) 
            safeForward()
        -- Z ekseni
        elseif pos.z < home_pos.z then
            faceDirection(SOUTH)
            safeForward()
        elseif pos.z > home_pos.z then
            faceDirection(NORTH)
            safeForward()
        -- Y ekseni
        elseif pos.y < home_pos.y then
            safeUp()
        elseif pos.y > home_pos.y then
            safeDown()
        end
        
        -- Fuel kontrol√º
        if not checkFuel() then
            log("‚õΩ Fuel bitti! Acil durum!")
            return false
        end
    end
    
    log("‚úÖ Home'a varƒ±ldƒ±")
    return true
end

function faceDirection(target_dir)
    local attempts = 0
    while direction ~= target_dir and attempts < 4 do
        turnLeft()
        attempts = attempts + 1
    end
    if direction ~= target_dir then
        log("‚ö†Ô∏è  faceDirection: Hedef y√∂ne d√∂n√ºlemedi!")
    end
end

function depositItemsAtHome() 
    log("üì• Home chest'e items aktarƒ±lƒ±yor...")
    
    -- Chest'in home'da olduƒüunu varsayƒ±yoruz (√ºst√ºnde, altƒ±nda veya √∂n√ºnde)
    local chest_found = false
    
    -- √ñnce altƒ±na bak
    if turtle.detectDown() then
        for slot = 2, 15 do
            if turtle.getItemCount(slot) > 0 then
                turtle.select(slot)
                if turtle.dropDown() then
                    chest_found = true
                else
                    break -- Chest dolu veya yok
                end
            end
        end
    end
    
    -- Alt chest yoksa, ge√ßici chest yerle≈ütir
    if not chest_found then
        if selectItem(CONFIG.CHEST_SLOT) then
            turtle.placeDown()
            
            for slot = 2, 15 do
                if turtle.getItemCount(slot) > 0 then
                    turtle.select(slot)
                    turtle.dropDown()
                end
            end
            
            log("‚ö†Ô∏è  Ge√ßici chest yerle≈ütirildi (Home'da ana chest bulunamadƒ±)")
        else
            log("‚ùå Ne home chest'i ne de spare chest bulunamadƒ±!")
            return false
        end
    end
    
    log("‚úÖ Items ba≈üarƒ±yla aktarƒ±ldƒ±")
    return true
end

function returnToMiningPosition(target_pos)
    log("‚õèÔ∏è  Mining pozisyonuna d√∂n√ºl√ºyor...")
    
    local max_steps = 1000
    local steps = 0
    
    -- Target pozisyonuna git
    while pos.x ~= target_pos.x or pos.z ~= target_pos.z or pos.y ~= target_pos.y do
        steps = steps + 1
        if steps > max_steps then
            log("‚ùå Mining pozisyonuna d√∂n√º≈ü sƒ±rasƒ±nda sonsuz d√∂ng√º tespit edildi!")
            return false
        end
        -- X ekseni
        if pos.x < target_pos.x then
            faceDirection(EAST)
            safeForward()
        elseif pos.x > target_pos.x then
            faceDirection(WEST)
            safeForward()
        -- Z ekseni  
        elseif pos.z < target_pos.z then
            faceDirection(SOUTH)
            safeForward()
        elseif pos.z > target_pos.z then
            faceDirection(NORTH)
            safeForward()
        -- Y ekseni
        elseif pos.y < target_pos.y then
            safeUp()
        elseif pos.y > target_pos.y then
            safeDown()
        end
    end
    
    -- Orijinal y√∂n√ºne d√∂n
    faceDirection(target_pos.dir)
    
    log("‚úÖ Mining pozisyonuna varƒ±ldƒ±")
    return true
end

-- ========================================
-- MINING ALGORITHMS
-- ========================================

function mineForward(steps, place_torches)
    place_torches = place_torches or false
    
    for step = 1, steps do
        -- Fuel kontrol√º
        if not checkFuel() then
            log("‚õΩ Fuel azaldƒ±, mining durduruluyor")
            return false
        end
        
        -- Inventory kontrol√º
        if isInventoryFull() then
            log("üéí Inventory dolu, items bo≈üaltƒ±lƒ±yor")
            if not dropItems() then
                return false
            end
        end
        
        -- ƒ∞leri git ve kaz (digTunnelSection dahil)
        safeForward()
        
        -- Torch yerle≈ütir (sadece sol tarafa, geri d√∂nerken engel olmaz)
        if place_torches then
            placeTorchSmart("left", step)
        end
        
        -- Progress g√∂ster
        if step % 10 == 0 then
            log("üî® Mining: " .. step .. "/" .. steps .. " blocks")
        end
    end
    
    return true
end

function mineBranch(length, return_back)
    if return_back == nil then return_back = true end
    
    log("üåø Yan dal kazƒ±lƒ±yor: " .. length .. " blok")
    
    -- Dalƒ± kaz
    if not mineForward(length, true) then
        return false
    end
    
    -- Geri d√∂n
    if return_back then
        turnAround()
        mineForward(length, false) -- Geri d√∂nerken torch yerle≈ütirme
        turnAround() -- Orijinal y√∂ne d√∂n
    end
    
    return true
end

function branchMining()
    log("üöÄ Branch Mining ba≈ülatƒ±lƒ±yor...")
    log("üìç Hedef Level: Y=" .. CONFIG.MINING_LEVEL .. " (T√ºnel Y√ºksekliƒüi: " .. CONFIG.TUNNEL_HEIGHT .. ")")
    
    if CONFIG.TUNNEL_HEIGHT == 2 then
        log("üíé 2x1 T√ºnel Modu: Y=" .. CONFIG.MINING_LEVEL .. " ve Y=" .. (CONFIG.MINING_LEVEL + 1) .. " kazƒ±lacak")
    else
        log("üìè 1x1 T√ºnel Modu: Sadece Y=" .. CONFIG.MINING_LEVEL .. " kazƒ±lacak")
    end
    
    -- Ana t√ºneli kaz
    log("üõ§Ô∏è  Ana t√ºnel kazƒ±lƒ±yor...")
    mineForward(CONFIG.TUNNEL_LENGTH, true)
    
    -- Geri d√∂n ana t√ºnelin ba≈üƒ±na
    turnAround()
    mineForward(CONFIG.TUNNEL_LENGTH, false)
    turnAround()
    
    -- Yan dallarƒ± kaz
    local branches_made = 0
    for i = CONFIG.BRANCH_SPACING, CONFIG.TUNNEL_LENGTH, CONFIG.BRANCH_SPACING do
        -- Pozisyona git
        mineForward(CONFIG.BRANCH_SPACING, false)
        
        -- Sol dal
        turnLeft()
        log("üåø Sol dal #" .. (branches_made + 1))
        mineBranch(CONFIG.BRANCH_LENGTH, true)
        turnRight() -- Ana t√ºnele d√∂n
        
        -- Saƒü dal  
        turnRight()
        log("üåø Saƒü dal #" .. (branches_made + 2))
        mineBranch(CONFIG.BRANCH_LENGTH, true)
        turnLeft() -- Ana t√ºnele d√∂n
        
        branches_made = branches_made + 2
        log("‚úÖ Toplam " .. branches_made .. " dal tamamlandƒ±")
    end
    
    log("üéâ Branch Mining tamamlandƒ±!")
    log("üìä Toplam dal sayƒ±sƒ±: " .. branches_made)
    log("üî• Yerle≈ütirilen torch sayƒ±sƒ±: " .. #torch_positions)
end

-- ========================================
-- MAIN FUNCTION
-- ========================================

function main()
    log("üî• ADVANCED MINING TURTLE v1.0")
    log("================================")
    
    -- Ba≈ülangƒ±√ß kontrolleri
    local current_fuel = turtle.getFuelLevel()
    local needed_fuel = calculateFuelNeeded()
    
    log("‚õΩ Mevcut fuel: " .. current_fuel)
    log("üìä Tahmini ihtiya√ß: " .. needed_fuel)
    
    if current_fuel < needed_fuel then
        log("‚ö†Ô∏è  Fuel yetersiz olabilir! Otomatik fuel deneniyor...")
        autoRefuel()
        current_fuel = turtle.getFuelLevel()
        
        if current_fuel < CONFIG.FUEL_EMERGENCY then
            log("‚ùå Kritik fuel eksikliƒüi! Mining ba≈ülatƒ±lamƒ±yor")
            log("üí° √ñneriler:")
            log("   - Slot " .. CONFIG.FUEL_SLOT .. "'a coal/wood ekleyin")
            log("   - Turtle'ƒ± fuel source yakƒ±nƒ±na g√∂t√ºr√ºn")
            return
        end
    end
    
    if not selectItem(CONFIG.TORCH_SLOT) then
        log("‚ùå Slot " .. CONFIG.TORCH_SLOT .. "'ta torch bulunamadƒ±!")
        return
    end
    
    if not selectItem(CONFIG.CHEST_SLOT) then
        log("‚ùå Slot " .. CONFIG.CHEST_SLOT .. "'ta chest bulunamadƒ±!")
        return
    end
    
    log("‚úÖ T√ºm kontroller ba≈üarƒ±lƒ±")
    log("üéØ Hedef Level: Y=" .. CONFIG.MINING_LEVEL .. " (Y√ºkseklik: " .. CONFIG.TUNNEL_HEIGHT .. ")")
    
    -- Home pozisyonunu kaydet
    setHomePosition()
    
    -- Mining ba≈ülat
    branchMining()
    
    -- Mining bittiƒüinde home'a d√∂n ve final deposit yap
    log("üè† Mining tamamlandƒ±, home'a d√∂n√ºl√ºyor...")
    if returnToHome() then
        depositItemsAtHome()
        log("‚ú® T√ºm items home chest'e aktarƒ±ldƒ±!")
    else
        log("‚ö†Ô∏è  Home'a d√∂n√º≈ü ba≈üarƒ±sƒ±z, items turtle'da kaldƒ±")
    end
    
    log("üéâ Mining i≈ülemi tamamlandƒ±!")
end

-- SCRIPT'ƒ∞ BA≈ûLAT
main()
